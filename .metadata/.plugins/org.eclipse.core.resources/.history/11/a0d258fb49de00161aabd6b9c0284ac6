
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Scanner;

import org.hibernate.HibernateException;
import org.hibernate.Session;
import org.hibernate.SessionFactory;
import org.hibernate.Transaction;
import org.hibernate.cfg.Configuration;

public class CinemaHibernate {
	private static Scanner sc = new Scanner(System.in);
	private static SessionFactory factory;

	public static void main(String[] args) {

		try {
			Configuration configuration = new Configuration().configure();
			factory = configuration.buildSessionFactory();
		} catch (HibernateException exception) {
			System.out.println("Problem creating session factory");
			exception.printStackTrace();
		} catch (Throwable ex) {
			System.err.println("Failed to create sessionFactory object." + ex);
			throw new ExceptionInInitializerError(ex);
		}

		HashMap<String, Runnable> map = new HashMap<String, Runnable>();

		map.put("show movies", new Runnable() {
			@Override
			public void makeSth() {

				Session session = factory.openSession();
				Transaction tx = null;
				try {
					tx = session.beginTransaction();
					List<Object> movies = session.createQuery("FROM Movie").list();
					for (Iterator<Object> iterator = movies.iterator(); iterator.hasNext();) {
						Movie movie = (Movie) iterator.next();
						System.out.print("  Name: " + movie.getName());
						System.out.println("  Rating: " + movie.getRating());
					}
					tx.commit();
				} catch (HibernateException e) {
					if (tx != null)
						tx.rollback();
					e.printStackTrace();
				} finally {
					session.close();
				}

			}
		});
		map.put("show movie projections", new Runnable() {
			int movieId = sc.nextInt();

			public void makeSth() {
				Session session = factory.openSession();
				Transaction tx = null;
				try {
					tx = session.beginTransaction();
					List<Object> movies = session.createQuery("FROM Projection WHERE movie_id=" + movieId).list();
					for (Iterator<Object> iterator = movies.iterator(); iterator.hasNext();) {
						Projection projection = (Projection) iterator.next();
						System.out.print("[" + projection.getId() + "] - ");
						System.out.print(projection.getDate() + " ");
						System.out.println(projection.getTime() + " (" + projection.getType() + ")");
					}
					tx.commit();
				} catch (HibernateException e) {
					if (tx != null)
						tx.rollback();
					e.printStackTrace();
				} finally {
					session.close();
				}
			}
		});
		map.put("make reservation", new Runnable() {
			@Override
			public void makeSth() {
				String name = "";
				int numOfTicket;
				int projectionId;
				int[] rowSeat;
				int[] colSeat;
				int[][] hall;
				do {
					System.out.println("Step 1 (USER):Choose name>");
					name = sc.nextLine();
					System.out.println("Step 1 (USER):Choose number of tickets>");
					numOfTicket = sc.nextInt();
					map.get("show movies").makeSth();
					System.out.println("Step 2(MOVIE): Choose a movie>");
					map.get("show movie projections").makeSth();
					System.out.println("Step 3 (Projection): Choose a projection>");
					projectionId = sc.nextInt();
					hall = seatsInHall(projectionId);

				} while (true);
			}

		});

		// map.get("show movies").makeSth();
		map.get("show movie projections").makeSth();
		// map.get("make reservation").makeSth();
		sc.close();
	}

	private static int[][] seatsInHall(int projectionId) {
		int[][] hall;
		hall = new int[10][10];
		Session session = factory.openSession();
		Transaction tx = null;
		try{
			tx = session.beginTransaction();
			List<Object> movies = session.createQuery("FROM Reservation WHERE projection_id=" + projectionId).list();
			for (Iterator<Object> iterator = movies.iterator(); iterator.hasNext();) {
			Reservation reservation=(Reservation) iterator.next();
			int row = reservation.getRow();
			int col = reservation.getCol();
			hall[row - 1][col - 1] = 1;
			}
			
		}catch (HibernateException e) {
			if (tx != null)
				tx.rollback();
			e.printStackTrace();
		} finally {
			session.close();
		}

		

		return hall;
	}

	public interface Runnable {

		void makeSth();
	}
}
